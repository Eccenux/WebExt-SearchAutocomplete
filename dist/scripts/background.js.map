{"version":3,"names":[],"mappings":"","sources":["scripts/background.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/**\n * Main settings.\n */\n\nvar _SearchHelper = require('./inc/SearchHelper.js');\n\nvar _SearchHelper2 = _interopRequireDefault(_SearchHelper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SETTINGS = {\n\tMAX_SUGGESTIONS: 6\n\n\t/**\n \tExample engine.\n \t\n \tRoughly compatible with `OpenSearchDescription`.\n */\n};var enWikiEngine = {\n\tkeywords: ['en'],\n\tbaseUrl: 'https://en.wikipedia.org/',\n\topenAction: {\n\t\turl: '{baseUrl}',\n\t\tmethod: 'GET',\n\t\tdata: {\n\t\t\tsearch: '{searchTerms}',\n\t\t\tsourceid: 'Mozilla-search'\n\t\t}\n\t},\n\tautocompleteAction: {\n\t\turl: '{baseUrl}w/api.php',\n\t\tmethod: 'GET',\n\t\ttype: 'application/x-suggestions+json',\n\t\tdata: {\n\t\t\taction: 'opensearch',\n\t\t\tsearch: '{searchTerms}'\n\t\t}\n\t}\n\n\t//\n\t// Omnibox setup\n\t//\n};\nvar searchHelper = new _SearchHelper2.default(SETTINGS, {\n\t'en': enWikiEngine\n});\n\n/**\n * Default suggestion displayed after typing in `sa`.\n */\nbrowser.omnibox.setDefaultSuggestion({\n\tdescription: 'Type in your search engine keyword and then your search terms.'\n});\n\n/**\n * Reaction for newly entered phrase.\n */\nbrowser.omnibox.onInputChanged.addListener(function (text, addSuggestions) {\n\tvar engineWithTerm = searchHelper.getEngine(text);\n\tvar searchTerm = engineWithTerm.text;\n\tvar engine = engineWithTerm.engine;\n\tvar action = engine.autocompleteAction;\n\tvar headers = new Headers({ 'Accept': action.type });\n\tvar init = { method: action.method, headers: headers };\n\tvar url = searchHelper.buildSearchUrl(engine, action, searchTerm);\n\tconsole.log('searchTerm:', searchTerm, 'url:', url, 'engine:', engine);\n\tvar request = new Request(url, init);\n\n\tfetch(request).then(function (response) {\n\t\treturn searchHelper.createSuggestionsFromResponse(engine, response);\n\t}).then(addSuggestions);\n});\n\n/**\n * React to choosen phrase or suggestion.\n */\nbrowser.omnibox.onInputEntered.addListener(function (text, disposition) {\n\tconsole.log('onInputEntered: ', text, disposition);\n\t// if suggestion was choosen then the text should contain a go-to URL\n\tvar url = text;\n\t// suggestion was not choosen, must build URL\n\tif (text.search(/^https?:/) !== 0) {\n\t\tvar engineWithTerm = searchHelper.getEngine(text);\n\t\tvar searchTerm = engineWithTerm.text;\n\t\tvar engine = engineWithTerm.engine;\n\t\turl = searchHelper.buildSearchUrl(engine, engine.openAction, searchTerm);\n\t}\n\t// react tab as expected\n\tswitch (disposition) {\n\t\tcase 'currentTab':\n\t\t\tbrowser.tabs.update({ url: url });\n\t\t\tbreak;\n\t\tcase 'newForegroundTab':\n\t\t\tbrowser.tabs.create({ url: url });\n\t\t\tbreak;\n\t\tcase 'newBackgroundTab':\n\t\t\tbrowser.tabs.create({ url: url, active: false });\n\t\t\tbreak;\n\t}\n});\n\n},{\"./inc/SearchHelper.js\":4}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.SearchEngine = SearchEngine;\n\nvar _SearchEngineAction = require('./SearchEngineAction.js');\n\nvar _SearchEngineAction2 = _interopRequireDefault(_SearchEngineAction);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction SearchEngine(engine) {\n\tthis.keywords = [];\n\tif (typeof engine.keywords === 'string') {\n\t\tthis.keywords.push(engine.keywords);\n\t} else {\n\t\tthis.keywords = engine.keywords;\n\t}\n\tthis.baseUrl = '';\n\tif (typeof engine.baseUrl === 'string') {\n\t\tthis.baseUrl = engine.baseUrl;\n\t}\n\tthis.openAction = new _SearchEngineAction2.default(engine.openAction);\n\tthis.autocompleteAction = new _SearchEngineAction2.default(engine.autocompleteAction);\n}\n\n},{\"./SearchEngineAction.js\":3}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.SearchEngineAction = SearchEngineAction;\nfunction SearchEngineAction(action) {\n\tthis.url = '';\n\tif (typeof action.url === 'string') {\n\t\tthis.url = action.url;\n\t}\n\tthis.method = 'GET';\n\tif (typeof action.method === 'string') {\n\t\tthis.method = action.method;\n\t}\n\tthis.type = '';\n\tif (typeof action.type === 'string') {\n\t\tthis.type = action.type;\n\t}\n\tthis.data = {};\n\tif (_typeof(action.data) === 'object') {\n\t\tthis.data = action.data;\n\t}\n}\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _SearchEngine = require('./SearchEngine.js');\n\nvar _SearchEngine2 = _interopRequireDefault(_SearchEngine);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//import SearchEngineAction from './SearchEngineAction.js';\n\n/**\r\n * Pre-parse all settings.\r\n * \r\n * @TODO Maybe support engines array later? Would allow support of mulitple keywords.\r\n * \r\n * @param {Object} SETTINGS General settings object.\r\n * @param {Object} engineMap Keyword-based search engines map.\r\n */\nfunction SearchHelper(SETTINGS, engineMap) {\n\tthis.SETTINGS = SETTINGS;\n\tthis.engineMap = engineMap;\n\tif (_typeof(engineMap.default) !== 'object') {\n\t\tvar firstKeyword = Object.keys(engineMap)[0];\n\t\tthis.engineMap.default = this.engineMap[firstKeyword];\n\t}\n}\n\n/**\r\n * Build search URL for the text.\r\n * \r\n * @param {SearchEngine} engine Engine to use.\r\n * @param {SearchEngineAction} action Action to call on the engine.\r\n * @param {String} text Search term.\r\n */\nSearchHelper.prototype.buildSearchUrl = function (engine, action, text) {\n\tvar url = action.url.replace('{baseUrl}', engine.baseUrl);\n\tvar first = true;\n\tfor (var key in action.data) {\n\t\tvar value = action.data[key].replace('{searchTerms}', text);\n\t\turl += first ? '?' : '&';\n\t\turl += key + '=' + encodeURIComponent(value);\n\t\tfirst = false;\n\t}\n\treturn url;\n};\n\n/**\r\n * @typedef {Object} EngineWithTerm\r\n * @property {SearchEngine} engine Engine to use.\r\n * @property {String} text Transformed search term.\r\n */\n\n/**\r\n * Find out which engine should be used based on entered text.\r\n * \r\n * `sa  something` uses default (first) engine\r\n * `sa ` should show you a list of engines (in future)\r\n * `sa a` should show you a list of engines with keywords starting with `a`\r\n * \r\n * @param {String} text Search term.\r\n * @return {EngineWithTerm} Engine with term stripped from the engine keyowrd.\r\n */\nSearchHelper.prototype.getEngine = function (text) {\n\tvar keyword = null;\n\tvar me = this;\n\ttext.replace(/^(\\S+)\\s+(.+)$/, function (a, word, rest) {\n\t\tif (word in me.engineMap) {\n\t\t\tkeyword = word;\n\t\t\ttext = rest;\n\t\t}\n\t});\n\tvar engine = void 0;\n\tif (keyword === null) {\n\t\tengine = this.engineMap.default;\n\t} else {\n\t\tengine = this.engineMap[keyword];\n\t}\n\treturn {\n\t\tengine: engine,\n\t\ttext: text\n\t};\n};\n\n/**\r\n * Create suggestions array from response.\r\n * \r\n * @param {SearchEngine} engine Engine used.\r\n * @param {Object} response The search engine response.\r\n */\nSearchHelper.prototype.createSuggestionsFromResponse = function (engine, response) {\n\tvar _this = this;\n\n\treturn new Promise(function (resolve) {\n\t\tvar suggestions = [];\n\t\tvar suggestionsOnEmptyResults = [{\n\t\t\tcontent: engine.baseUrl,\n\t\t\tdescription: 'No results found'\n\t\t}];\n\t\tresponse.json().then(function (json) {\n\t\t\tconsole.log('response:', json);\n\t\t\tif (!json.length) {\n\t\t\t\treturn resolve(suggestionsOnEmptyResults);\n\t\t\t}\n\n\t\t\tvar max = _this.SETTINGS.MAX_SUGGESTIONS;\n\n\t\t\t// for Wikipedia:\n\t\t\t// json[0] = search term\n\t\t\t// json[1] = [...titles...]\n\t\t\t// json[2] = [...descriptions...]\n\t\t\t// json[3] = [...direct urls...]\n\t\t\tvar titles = json[1];\n\t\t\tvar descriptions = json[2];\n\t\t\tvar urls = json[3];\n\n\t\t\tif (titles.length < 1) {\n\t\t\t\treturn resolve(suggestionsOnEmptyResults);\n\t\t\t}\n\n\t\t\tvar count = Math.min(titles.length, max);\n\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\t// gather data\n\t\t\t\tvar title = titles[i];\n\t\t\t\tvar description = title;\n\t\t\t\tif (descriptions && typeof descriptions[i] === 'string') {\n\t\t\t\t\tdescription += ' -- ' + descriptions[i];\n\t\t\t\t}\n\t\t\t\tvar url = '';\n\t\t\t\tif (urls && typeof urls[i] === 'string') {\n\t\t\t\t\turl = urls[i];\n\t\t\t\t} else {\n\t\t\t\t\turl = buildSearchUrl(engine, engine.openAction, title);\n\t\t\t\t}\n\t\t\t\t// add suggestion\n\t\t\t\tsuggestions.push({\n\t\t\t\t\tcontent: url,\n\t\t\t\t\tdescription: description\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn resolve(suggestions);\n\t\t});\n\t});\n};\n\nexports.default = SearchHelper;\n\n},{\"./SearchEngine.js\":2}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"file":"background.js"}